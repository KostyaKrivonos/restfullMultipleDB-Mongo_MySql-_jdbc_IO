package com.example.MongoAndMySqlMultiple.mongoDB.mongoService;

import lombok.extern.log4j.Log4j2;

import com.example.MongoAndMySqlMultiple.mongoDB.modelMongo.Person;
import com.example.MongoAndMySqlMultiple.mongoDB.mongoRepository.PersonRepository;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Component;

/**
 * @author kostyadev
 */

@Log4j2
@Component
public class PersonService {

	@Autowired
	private PersonRepository personRepository;

	/**
	 * a method that return a person object from the database
	 * 
	 * @param id - person number generated by the database.
	 */
	public Person findOne(String name, String phone) {
		log.info("find one person by name: {} and phone: {}", name, phone);
		return personRepository.findOne(name, phone);
	}

	/**
	 * the method adds persons to the database.
	 * 
	 * @param Person p we transfer two values to the constructor name and phone
	 *               number.
	 * 
	 * @return true - if person save in database;
	 * @return false - if a person with such data already exists in the database;
	 */
	public boolean create(Person p) {
		log.info("led the parameters: name: " + p.getName() + "; phone: " + p.getPhone());
		if (personRepository.findOne(p.getName(), p.getPhone()) == null) {
			personRepository.save(p);
			log.info("person " + "name: " + p.getName() + "; phone: " + p.getPhone() + " - is add in DB");
			return true;
		}
		log.info("person name: " + p.getName() + "; phone: " + p.getPhone() + " - not add in DB");
		return false;
	}

	/**
	 * the method updates the changed data(name, phone) in the database passed to
	 * the parameters, by ID
	 * 
	 * @param p - object person where papameters in consructor (id, name, phone);
	 */
	public void update(Person p) {
		log.info("person id: " + p.getId() + "; name: " + p.getName() + "; phone: " + p.getPhone() + " - updated");
		personRepository.save(p);
	}

	/**
	 * 
	 * a method that return a person object from the database
	 * 
	 * @param id - person number generated by the database.
	 * @return person
	 */
	public Person findById(ObjectId id) {
		log.info("find person by id: " + id + " from DB");
		return personRepository.findById(id);
	}

	/**
	 * the method removes persons from the database by ID;
	 * 
	 * @param id
	 * @return true - if the person is in the database and deleted;
	 * @return false - if person is not found in the database;
	 */
	public boolean delete(ObjectId id) {
		log.info("person id: " + id + ", is delete");
		personRepository.deleteById(id.toHexString());
		return true;
	}

	/**
	 * The method displays a page with a certain number of data lines; the parameter
	 * of the method is passed the page number;
	 * 
	 * @param page - number page;
	 * @return data page;
	 */
	public Page<Person> findAll(int page) {
		log.info("Show 3 person on each page from DB ");
		return personRepository.findAll(PageRequest.of(page, 3));
	}
}